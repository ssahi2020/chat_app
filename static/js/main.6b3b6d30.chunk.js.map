{"version":3,"sources":["components/utils.js","components/Logout.js","components/Header.js","components/NotFound.js","components/Login.js","components/SignUp.js","components/ChannelList.js","components/ChannelView.js","components/ReplyThread.js","components/Channel.js","App.js","serviceWorker.js","index.js","imgs/belayer.png"],"names":["isSignedIn","user_id","localStorage","getItem","username","console","log","Logout","props","state","isDone","fetch","headers","Accept","credentials","method","then","clear","logUserOut","setState","this","to","React","Component","Header","logOutlogIn","history","push","className","style","backgroundImage","Belayer","height","paddingTop","marginTop","width","float","onClick","fontSize","textAlign","color","maxHeight","withRouter","NotFound","border","minWidth","borderRadius","marginBottom","Login","changeUsername","e","target","value","changePassword","password","logIn","a","loading","body","JSON","stringify","loginResponse","status","json","loginResult","setItem","email","first_name","last_name","logUserIn","toChannel","attempt","margin","maxWidth","type","placeholder","size","onChange","SignUp","changeConfirmation","confirmation","changeFirstName","changeLastName","changeEmail","signUp","ChannelList","changeChannelName","newChannel","pollForChannels","response","data","channel_list","name","chooseChannel","renderMessages","deleteChannel","interval","setInterval","clearInterval","channels","map","channel","cursor","id","ChannelView","changeMessage","newMessage","pollForMessages","clicked_channel","message_list","text","chooseMessage","renderThread","validImage","validUrl","exec","messages","message","src","overflow","ReplyThread","changeReply","reply_text","pollForReplies","thread_id","msg_id","reply_list","newReply","replies","reply","Channel","in_thread","msg","clicked_thread_id","clicked_message","App","updateLoginStatus","loggedIn","bind","exact","path","key","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.6b3b6d30.chunk.js","sourcesContent":["export const isSignedIn = () => {\n  let user_id = localStorage.getItem(\"user_id\")\n  let username = localStorage.getItem(\"username\")\n\n  if (user_id && username) {\n    console.log(\"Still signed in!\")\n    return true\n  } else {\n    console.log(\"signed out...\")\n    return false\n  }\n}\n","import React from \"react\"\nimport { Redirect } from \"react-router-dom\"\n\nclass Logout extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { isDone: false }\n  }\n\n  async componentDidMount() {\n    console.log(\"logging out component\")\n    await fetch(\"/api/users/logout\", {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      credentials: \"same-origin\",\n      method: \"get\",\n    }).then(() => {\n      localStorage.clear()\n      this.props.logUserOut()\n      this.setState({ isDone: true })\n    })\n  }\n\n  render() {\n    if (this.state.isDone === true) {\n      return <Redirect to=\"/login\" />\n    } else {\n      return <p>logging out</p>\n    }\n  }\n}\n\nexport default Logout\n","import React from \"react\"\nimport Belayer from \"../imgs/belayer.png\"\nimport { isSignedIn } from \"../components/utils\"\nimport Logout from \"../components/Logout\"\nimport { Button } from \"antd\"\nimport { withRouter } from \"react-router-dom\"\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n  }\n  logOutlogIn = () => {\n    console.log(isSignedIn())\n    if (isSignedIn()) {\n      this.props.history.push(\"/logout\")\n      console.log(\"pushed to logout\")\n    }\n  }\n  render() {\n    return (\n      <div\n        className=\"App-header\"\n        style={{\n          backgroundImage: `url(${Belayer})`,\n          height: \"100px\",\n          paddingTop: 0,\n          marginTop: 0,\n        }}\n      >\n        <Button\n          style={{\n            width: \"84px\",\n            height: \"45px\",\n            float: \"right\",\n          }}\n          onClick={() => this.logOutlogIn()}\n        >\n          {\" \"}\n          {isSignedIn() ? \"Log Out\" : \"Log In\"}{\" \"}\n        </Button>\n        <h1\n          style={{\n            fontSize: \"50pt\",\n            textAlign: \"center\",\n            color: \"white\",\n            maxHeight: \"100px\",\n            paddingTop: 0,\n            marginTop: 0,\n          }}\n        >\n          Belay\n        </h1>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(Header)\n","import React from \"react\"\nimport { withRouter, Link } from \"react-router-dom\"\n\nclass NotFound extends React.Component {\n  render() {\n    return (\n      <div\n        style={{\n          border: \"1px solid black\",\n          marginTop: \"50px\",\n          minWidth: \"250px\",\n          borderRadius: \"0\",\n        }}\n      >\n        <h2 style={{ marginTop: \"50px\" }}>404 page not found </h2>\n        <div style={{ fontSize: \"16px\", marginBottom: \"8px\" }}>\n          Click <Link to=\"/\">here</Link> to get back to safety\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(NotFound)\n","import React from \"react\"\nimport { Link, Redirect } from \"react-router-dom\"\nimport { Input, Button, Row, Col } from \"antd\"\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      username: null,\n      password: null,\n      toChannel: false,\n      attempt: false,\n    }\n  }\n\n  changeUsername = (e) => {\n    this.setState({ username: e.target.value })\n  }\n\n  changePassword = (e) => {\n    this.setState({ password: e.target.value })\n  }\n\n  logIn = async () => {\n    await this.setState({ loading: true })\n    localStorage.clear()\n    let loginResponse = await fetch(\"/api/login\", {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      credentials: \"same-origin\", //allows to pass session cookie between client and server\n      method: \"post\",\n      body: JSON.stringify({\n        username: this.state.username,\n        password: this.state.password,\n      }),\n    })\n\n    if (loginResponse.status === 200) {\n      const loginResult = await loginResponse.json()\n      console.log(loginResult)\n      localStorage.setItem(\"user_id\", loginResult.user_id)\n      localStorage.setItem(\"username\", loginResult.username)\n      localStorage.setItem(\"email\", loginResult.email)\n      localStorage.setItem(\"first_name\", loginResult.first_name)\n      localStorage.setItem(\"last_name\", loginResult.last_name)\n\n      this.props.logUserIn()\n      this.setState({ toChannel: true })\n    } else {\n      this.setState({ attempt: true })\n    }\n  }\n\n  render() {\n    if (this.state.toChannel === true) {\n      return <Redirect to=\"/channel\" />\n    }\n    return (\n      <div\n        className=\"App-login\"\n        style={{\n          border: \"1px solid black\",\n          width: \"75%\",\n          margin: \"auto\",\n          maxWidth: \"300px\",\n          minWidth: \"200px\",\n        }}\n      >\n        <div style={{ textAlign: \"center\", margin: \"auto\" }}>\n          <Row>\n            <label>Username</label>\n            <Input\n              type=\"text\"\n              placeholder=\"username\"\n              size=\"large\"\n              onChange={this.changeUsername}\n            />\n          </Row>\n          <Row>\n            <label>Password</label>\n            <Input type=\"password\" size=\"large\" onChange={this.changePassword} />\n          </Row>\n          <div>\n            <Button type=\"primary\" onClick={this.logIn}>\n              Log In\n            </Button>\n          </div>\n        </div>\n        <div style={{ fontSize: \"12px\", marginBottom: \"8px\" }}>\n          <Link to=\"/signup\">Sign Up</Link>\n          <br />\n          <Link to=\"/forgotpwd\">Forgot Password?</Link>\n        </div>\n        {this.state.attempt ? <p>Wrong Username/Password Combo</p> : null}\n      </div>\n    )\n  }\n}\n\nexport default Login\n","import React from \"react\"\nimport { Link, Redirect } from \"react-router-dom\"\nimport { Input, Button, Row, Col } from \"antd\"\n\nclass SignUp extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      username: null,\n      password: null,\n      confirmation: null,\n      first_name: null,\n      last_name: null,\n      email: null,\n      toChannel: false,\n    }\n  }\n\n  changeUsername = (e) => {\n    this.setState({ username: e.target.value })\n  }\n  changePassword = (e) => {\n    this.setState({ password: e.target.value })\n  }\n  changeConfirmation = (e) => {\n    this.setState({ confirmation: e.target.value })\n  }\n  changeFirstName = (e) => {\n    this.setState({ first_name: e.target.value })\n  }\n  changeLastName = (e) => {\n    this.setState({ last_name: e.target.value })\n  }\n  changeEmail = (e) => {\n    this.setState({ email: e.target.value })\n  }\n\n  signUp = async () => {\n    await this.setState({ loading: true })\n    localStorage.clear()\n    console.log(\"hi!\")\n    const signupResponse = await fetch(\"/api/signup\", {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      credentials: \"same-origin\", //allows to pass session cookie between client and server\n      method: \"post\",\n      body: JSON.stringify({\n        username: this.state.username,\n        password: this.state.password,\n        confirmation: this.state.confirmation,\n        first_name: this.state.first_name,\n        last_name: this.state.last_name,\n        email: this.state.email,\n      }),\n    })\n\n    if (signupResponse.status === 200) {\n      console.log(\"signed up\")\n    }\n\n    const loginResponse = await fetch(\"/api/login\", {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      credentials: \"same-origin\",\n      method: \"post\",\n      body: JSON.stringify({\n        username: this.state.username,\n        password: this.state.password,\n      }),\n    })\n\n    if (loginResponse.status === 200) {\n      const loginResult = await loginResponse.json()\n      console.log(loginResult)\n      localStorage.setItem(\"user_id\", loginResult.user_id)\n      localStorage.setItem(\"username\", loginResult.username)\n      localStorage.setItem(\"email\", loginResult.email)\n      localStorage.setItem(\"first_name\", loginResult.first_name)\n      localStorage.setItem(\"last_name\", loginResult.last_name)\n\n      this.props.logUserIn()\n      this.setState({ toChannel: true })\n    } else {\n      console.log(\"LOGIN FAILED\")\n    }\n\n    this.props.logUserIn()\n  }\n\n  render() {\n    if (this.state.toChannel === true) {\n      return <Redirect to=\"/channel\" />\n    }\n    return (\n      <div\n        style={{\n          border: \"1px solid black\",\n          width: \"75%\",\n          margin: \"auto\",\n          maxWidth: \"300px\",\n          minWidth: \"200px\",\n        }}\n      >\n        <div style={{ textAlign: \"center\", margin: \"auto\" }}>\n          <Row>\n            <label>Username</label>\n            <Input\n              type=\"text\"\n              placeholder=\"username\"\n              size=\"large\"\n              onChange={this.changeUsername}\n            />\n          </Row>\n          <Row>\n            <label> First Name </label>\n            <Input\n              type=\"text\"\n              placeholder=\"First Name\"\n              size=\"large\"\n              onChange={this.changeFirstName}\n            />\n          </Row>\n          <Row>\n            <label> Last Name </label>\n            <Input\n              type=\"text\"\n              placeholder=\"Last Name\"\n              size=\"large\"\n              onChange={this.changeLastName}\n            />\n          </Row>\n          <Row>\n            <label> Email </label>\n            <Input\n              type=\"text\"\n              placeholder=\"Last Name\"\n              size=\"large\"\n              onChange={this.changeEmail}\n            />\n          </Row>\n          <Row>\n            <label>Password</label>\n            <Input type=\"password\" size=\"large\" onChange={this.changePassword} />\n          </Row>\n          <Row>\n            <label>Confirm Password</label>\n            <Input type=\"password\" size=\"large\" onChange={this.changeConfirmation} />\n          </Row>\n          <div>\n            <Button type=\"primary\" onClick={this.signUp}>\n              Sign Up and Log In\n            </Button>\n          </div>\n        </div>\n        <div style={{ fontSize: \"12px\", marginBottom: \"8px\" }}></div>\n      </div>\n    )\n  }\n}\n\nexport default SignUp\n","import React from \"react\"\nimport { Redirect } from \"react-router-dom\"\nimport { Input, Button, Row, Col } from \"antd\"\n\nclass ChannelList extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      newChannel: null,\n      user_id: localStorage.getItem(\"user_id\"),\n      channel_list: [],\n    }\n  }\n\n  componentDidMount() {\n    this.pollForChannels()\n    this.interval = setInterval(() => this.pollForChannels(), 1000)\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval)\n  }\n\n  changeChannelName = (e) => {\n    this.setState({ newChannel: e.target.value })\n  }\n\n  pollForChannels = () => {\n    // console.log(\"querying channel names & views\")\n\n    fetch(\"/api/channels/view\", {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      credentials: \"same-origin\", //allows to pass session cookie between client and server\n      method: \"post\",\n      body: JSON.stringify({\n        user_id: localStorage.getItem(\"user_id\"),\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        this.setState({ channel_list: data })\n        console.log(data)\n        // this.pollForChannels()\n      })\n  }\n\n  newChannel = () => {\n    console.log(\"inserting new channel\")\n\n    fetch(\"/api/channels/create\", {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      credentials: \"same-origin\",\n      method: \"post\",\n      body: JSON.stringify({\n        name: this.state.newChannel,\n        user_id: localStorage.getItem(\"user_id\"),\n      }),\n    }).then(() => this.pollForChannels())\n  }\n\n  chooseChannel = (e) => {\n    console.log(\"clicked\", e)\n    this.props.renderMessages(e)\n  }\n\n  deleteChannel = (e) => {\n    console.log(\"to delete\", e)\n    fetch(\"/api/channels/delete\", {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      credentials: \"same-origin\",\n      method: \"post\",\n      body: JSON.stringify({\n        name: e,\n        user_id: localStorage.getItem(\"user_id\"),\n      }),\n    }).then((response) => {\n      if (response.status !== 200) {\n        console.log(\"user cannot delete channel\")\n      } else {\n        this.pollForChannels()\n      }\n    })\n  }\n\n  render() {\n    const channels = this.state.channel_list.map((channel) => (\n      <div className=\"Channel-Row\">\n        <div\n          className=\"Channel-Column\"\n          style={{ cursor: \"pointer\" }}\n          onClick={() => this.chooseChannel(channel[\"name\"])}\n        >\n          {\" \"}\n          {channel[\"name\"]}{\" \"}\n        </div>\n        <div\n          className=\"Channel-Column\"\n          style={{ cursor: \"pointer\" }}\n          onClick={() => this.deleteChannel(channel[\"name\"])}\n        >\n          Delete\n        </div>\n        <div className=\"Channel-Column\">{channel[\"unread_messages\"]}</div>\n      </div>\n    ))\n\n    return (\n      <div>\n        <Row>\n          <label>Enter Channel Name</label>\n          <Input\n            type=\"text\"\n            placeholder=\"Channel Name\"\n            size=\"large\"\n            onChange={this.changeChannelName}\n          />\n          <Button\n            style={{ cursor: \"pointer\" }}\n            type=\"primary\"\n            onClick={() => this.newChannel()}\n          >\n            Create Channel\n          </Button>\n        </Row>\n        <div id=\"channelspace\"> {channels}</div>\n      </div>\n    )\n  }\n}\n\nexport default ChannelList\n","import React from \"react\"\nimport { Redirect } from \"react-router-dom\"\nimport { Input, Button, Row, Col } from \"antd\"\n// import MessageDisplay from \"./MessageDisplay\"\n\nclass ChannelView extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      newMessage: null,\n      message_list: [],\n    }\n  }\n\n  componentDidMount() {\n    this.pollForMessages()\n    this.interval = setInterval(() => this.pollForMessages(), 1000)\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval)\n  }\n\n  changeMessage = (e) => {\n    this.setState({ newMessage: e.target.value })\n  }\n\n  pollForMessages = () => {\n    // console.log(\"querying messages for clicked channel\")\n    // console.log(this.props.clicked_channel)\n    fetch(\"api/channels/read/\", {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      credentials: \"same-origin\", //allows to pass session cookie between client and server\n      method: \"post\",\n      body: JSON.stringify({\n        name: this.props.clicked_channel,\n        user_id: localStorage.getItem(\"user_id\"),\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        // console.log(data)\n        this.setState({ message_list: data }) // add to the query on the server to pull info on whether message has been viewed\n      })\n  }\n\n  newMessage = () => {\n    console.log(\"posting message\")\n    fetch(\"/api/messages/post\", {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      credentials: \"same-origin\", //allows to pass session cookie between client and server\n      method: \"post\",\n      body: JSON.stringify({\n        text: this.state.newMessage,\n        username: localStorage.getItem(\"username\"),\n        name: this.props.clicked_channel,\n      }),\n    })\n      .then(console.log(\"message posted!\"))\n      .then(this.pollForMessages())\n  }\n\n  chooseMessage = (e) => {\n    console.log(\"clicked\", e)\n    this.props.renderThread(e)\n  }\n\n  validImage = (e) => {\n    const imgRules = /(http(s?):)([/|.|\\w|\\s|\\(\\)#\\:-])*\\.(?:jpg|jpeg|gif|png|bmp|ico|svg|tiff|webp)/gi\n    const validUrl = imgRules.exec(e)\n    console.log(validUrl)\n    return validUrl\n  }\n\n  render() {\n    const messages = this.state.message_list.map((message) => (\n      <div style={{ cursor: \"pointer \" }} onClick={() => this.chooseMessage(message)}>\n        {message[\"username\"]}: {message[\"body\"]}\n        <br />\n        {this.validImage(message[\"body\"]) !== null ? (\n          <img src={this.validImage(message[\"body\"])[0]} />\n        ) : null}\n      </div>\n    ))\n\n    if (this.props.clicked_channel === null) {\n      return (\n        <p style={{ textAlign: \"center\" }}>Click a Channel to view and post Messages!</p>\n      )\n    } else {\n      return (\n        <div>\n          <Row>\n            <p>Channel: {this.props.clicked_channel}</p>\n            <div style={{ overflow: \"scroll\" }} id=\"chatspace\">\n              {\" \"}\n              {messages}\n            </div>\n            <Input\n              type=\"text\"\n              placeholder=\"Enter Message\"\n              size=\"large\"\n              onChange={this.changeMessage}\n            />\n            <Button\n              style={{ cursor: \"pointer\" }}\n              type=\"primary\"\n              onClick={() => this.newMessage()}\n            >\n              Post Message\n            </Button>\n          </Row>\n        </div>\n      )\n    }\n  }\n}\n\nexport default ChannelView\n","import React from \"react\"\nimport { Redirect } from \"react-router-dom\"\nimport { Input, Button, Row, Col } from \"antd\"\n\nclass ReplyThread extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      reply_list: [],\n      reply_text: null,\n    }\n  }\n\n  componentDidMount() {\n    this.pollForReplies()\n    this.interval = setInterval(() => this.pollForReplies(), 1000)\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval)\n  }\n\n  changeReply = (e) => {\n    this.setState({ reply_text: e.target.value })\n  }\n\n  pollForReplies = () => {\n    console.log(this.props.thread_id)\n    fetch(\"/api/threads/read\", {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      credentials: \"same-origin\", //allows to pass session cookie between client and server\n      method: \"post\",\n      body: JSON.stringify({\n        msg_id: this.props.thread_id,\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        this.setState({ reply_list: data })\n        // this.pollForReplies()\n      })\n  }\n\n  newReply = () => {\n    console.log(\"posting reply:\", this.state.reply_text)\n    fetch(\"/api/threads/post\", {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      credentials: \"same-origin\", //allows to pass session cookie between client and server\n      method: \"post\",\n      body: JSON.stringify({\n        name: this.props.clicked_channel,\n        msg_id: this.props.thread_id,\n        user_id: localStorage.getItem(\"user_id\"),\n        message: this.state.reply_text,\n      }),\n    })\n      .then(console.log(\"reply posted!\"))\n      .then(this.pollForReplies())\n  }\n\n  validImage = (e) => {\n    const imgRules = /(http(s?):)([/|.|\\w|\\s|\\(\\)#\\:-])*\\.(?:jpg|jpeg|gif|png|bmp|ico|svg|tiff|webp)/gi\n    const validUrl = imgRules.exec(e)\n    console.log(validUrl)\n    return validUrl\n  }\n\n  render() {\n    const replies = this.state.reply_list.map((reply) => (\n      <div>\n        {\" \"}\n        {reply[\"username\"]} : {reply[\"body\"]}\n        <br />\n        {this.validImage(reply[\"body\"]) !== null ? (\n          <img src={this.validImage(reply[\"body\"])[0]} />\n        ) : null}\n      </div>\n    ))\n    return (\n      <div>\n        <p>Replies To: {this.props.message}</p>\n        {this.validImage(this.props.message) !== null ? (\n          <img src={this.validImage(this.props.message)[0]} />\n        ) : null}\n        <div id=\"replyspace\">{replies}</div>\n        <Input\n          type=\"text\"\n          placeholder=\"Enter Reply\"\n          size=\"large\"\n          onChange={this.changeReply}\n        />\n        <Button\n          style={{ cursor: \"pointer\" }}\n          type=\"primary\"\n          onClick={() => this.newReply()}\n        >\n          Reply\n        </Button>\n      </div>\n    )\n  }\n}\n\nexport default ReplyThread\n","import React from \"react\"\nimport ChannelList from \"../components/ChannelList\"\nimport ChannelView from \"../components/ChannelView\"\nimport ReplyThread from \"../components/ReplyThread\"\nimport { Link } from \"react-router-dom\"\nimport { Input, Button, Row, Col } from \"antd\"\n\nclass Channel extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      in_thread: false,\n      clicked_channel: null,\n      clicked_thread_id: null,\n      clicked_message: null,\n    }\n  }\n\n  renderMessages = (channel) => {\n    console.log(this.state.in_thread)\n    this.setState({ clicked_channel: channel })\n  }\n\n  renderThread = (msg) => {\n    console.log(msg)\n    this.setState({\n      in_thread: true,\n      clicked_thread_id: msg[\"message_id\"],\n      clicked_message: msg[\"body\"],\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"Channel-Cols\">\n        <div>\n          <ChannelList renderMessages={this.renderMessages} />\n        </div>\n        <div\n          className={this.state.in_thread ? \"Skinny-Message-View\" : \"Full-Message-View\"}\n        >\n          <ChannelView\n            in_thread={this.state.in_thread}\n            clicked_channel={this.state.clicked_channel}\n            renderThread={this.renderThread}\n          />\n        </div>\n        {this.state.in_thread && (\n          <ReplyThread\n            clicked_channel={this.state.clicked_channel}\n            thread_id={this.state.clicked_thread_id}\n            message={this.state.clicked_message}\n          />\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Channel\n","//Thanks to help from Trace Sauter, Sauhard Sahi, Trevor Austin, and many sleepless nights on stackoverflow\n\nimport React from \"react\"\nimport \"./App.css\"\nimport Header from \"./components/Header\"\nimport NotFound from \"./components/NotFound\"\nimport Login from \"./components/Login\"\nimport Logout from \"./components/Logout\"\nimport SignUp from \"./components/SignUp\"\nimport Channel from \"./components/Channel\"\nimport { isSignedIn } from \"./components/utils\"\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      loggedIn: false, //check local storage to see if signed in\n    }\n\n    this.updateLoginStatus = this.updateLoginStatus.bind(this)\n  }\n\n  updateLoginStatus = () => {\n    this.setState({ loggedIn: isSignedIn() })\n  }\n\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"Container\">\n          <Header />\n          <Switch>\n            <div className=\"Channel-Container\">\n              <Route\n                exact\n                path=\"/\"\n                key=\"home\"\n                render={(props) => <SignUp logUserIn={this.updateLoginStatus} />}\n              />\n              <Route\n                path=\"/login\"\n                key=\"login\"\n                render={(props) => <Login logUserIn={this.updateLoginStatus} />}\n              />\n              <Route path=\"/channel\" key=\"channel\" render={(props) => <Channel />} />\n              <Route\n                path=\"/signup\"\n                key=\"signup\"\n                render={(props) => <SignUp logUserIn={this.updateLoginStatus} />}\n              />\n              <Route\n                path=\"/logout\"\n                key=\"logout\"\n                render={(props) => <Logout logUserOut={this.updateLoginStatus} />}\n              />\n            </div>\n            <Route component={NotFound} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/belayer.5f9134d6.png\";"],"sourceRoot":""}